#!/usr/bin/env bash

### Helpers begin
check_deps() {
    local missing
    for d in "${deps[@]}"; do
        if [[ -z $(command -v "$d") ]]; then
            # Force absolute path
            if [[ ! -e "/$d" ]]; then
                err "$d was not found"
                missing="true"
            fi
        fi
    done; unset d
    [[ -z $missing ]] || exit 128
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || return 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || return 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_as_interface_func() {
    local datatype="$1" && shift
    local family="$1" && shift

    cat <<EOF
func mustGet${family}${datatype}AsInterface(
    val any,
EOF

    case "$datatype" in
        "Array")
            cat <<EOF
) (ret []any) {
EOF
            ;;
        "Map")
            cat <<EOF
) (ret map[string]any) {
    ret = map[string]any{}
EOF
            ;;
    esac

    cat <<EOF
	switch val.(type) {
EOF

    case "$datatype" in
        "Array")
            for thetype in "$@"; do
                cat <<EOF
	case []$thetype:
        for _, v := range val.([]$thetype) {
            ret = append(ret, v)
        }
EOF
            done; unset thetype
            ;;
        "Map")
            for thetype in "$@"; do
                cat <<EOF
	case map[string]$thetype:
        for k, v := range val.(map[string]$thetype) {
            ret[k] = v
        }
EOF
            done; unset thetype
            ;;
    esac

    cat <<EOF
    }

	return
}

EOF
}

generate_keys_func() {
    local datatype="$1" && shift
    local family="$1" && shift

    cat <<EOF
func mustGet${family}${datatype}Keys(val any) (ret []string) {
EOF

    case "$datatype" in
        "Map")
            cat <<EOF
    var less lessFunc = func(i int, j int) bool {
        if strings.EqualFold(ret[i], ret[j]) {
            return ret[i] < ret[j]
        }

		return strings.ToLower(ret[i]) < strings.ToLower(ret[j])
	}
EOF
            ;;
    esac

    cat <<EOF
	switch val.(type) {
EOF

    case "$datatype" in
        "Array")
            for thetype in "$@"; do
                cat <<EOF
	case []$thetype:
		for i := 0; i < len(val.([]$thetype)); i++ {
			ret = append(ret, strconv.Itoa(i))
		}
EOF
            done; unset thetype
            ;;
        "Map")
            for thetype in "$@"; do
                cat <<EOF
	case map[string]$thetype:
		for k := range val.(map[string]$thetype) {
			ret = append(ret, k)
		}
EOF
            done; unset thetype
            ;;
    esac

    cat <<EOF
    }

EOF

    case "$datatype" in
        "Map")
            cat <<EOF
    if !sort.SliceIsSorted(ret, less) {
        sort.SliceStable(ret, less)
    }
EOF
            ;;
    esac

    cat <<EOF
	return
}

EOF
}

generate_type_funcs() {
    local thetype="$1"
    local rtype="${thetype:-any}"

    case "$thetype" in
        "") ;;
        "bool")
            cat <<EOF
func as${thetype^}(keys []any, v any) (ret $thetype, e error) {
    switch v := v.(type) {
    case $thetype:
        ret = v
    default:
        e = errors.Newf("key %v is not of type $thetype", keys)
    }
    return
}

EOF
            ;;
        "float"*|"int"*|"uint"*)
            cat <<EOF
func as${thetype^}(keys []any, v any) (ret $thetype, e error) {
    switch v := v.(type) {
EOF

    for realtype in \
        float32 float64 \
        int int8 int16 int32 int64 \
        uint uint8 uint16 uint32 uint64
    do
        cat <<EOF
    case $realtype:
        ret = $thetype(v)
EOF
    done; unset realtype

    cat <<EOF
    default:
        e = errors.Newf("key %v is not of type $thetype", keys)
    }
    return
}

EOF
            ;;
        "string")
            cat <<EOF
func as${thetype^}(keys []any, v any) (ret $thetype, e error) {
    switch v := v.(type) {
    case $thetype:
        ret = v
    default:
        e = errors.Newf("key %v is not of type $thetype", keys)
    }
    return
}

EOF
            ;;
    esac

    case "$thetype" in
        "")
            cat <<EOF
// Get will return the value for the specified key(s) as a $rtype.
func (j *JSON) Get(keys ...any) (ret $rtype) {
    ret, _ = j.MustGet(keys...)
    return
}

// GetArray will return an array for the specified key(s) as an
// []$rtype.
func (j *JSON) GetArray(keys ...any) (ret []$rtype) {
    ret, _ = j.MustGetArray(keys...)
    return
}

// GetMap will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) GetMap(keys ...any) (ret map[string]$rtype) {
    ret, _ = j.MustGetMap(keys...)
    return
}

// MustGet will return the value for the specified key(s) as a $rtype.
func (j *JSON) MustGet(keys ...any) ($rtype, error) {
    return j.nestedGetKey(keys)
}

EOF
            ;;
        "bool"|"float"*|"int"*|"uint"*|"string")
            cat <<EOF
// Get${thetype^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) Get${thetype^}(keys ...any) (ret $rtype) {
    ret, _ = j.MustGet${thetype^}(keys...)
    return
}

// Get${thetype^}Array will return an array for the specified key(s) as a
// []$rtype.
func (j *JSON) Get${thetype^}Array(keys ...any) (ret []$rtype) {
    ret, _ = j.MustGet${thetype^}Array(keys...)
    return
}

// Get${thetype^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) Get${thetype^}Map(keys ...any) (ret map[string]$rtype) {
    ret, _ = j.MustGet${thetype^}Map(keys...)
    return
}

// MustGet${thetype^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) MustGet${thetype^}(keys ...any) (ret $rtype, e error) {
    var val any

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    ret, e = as${thetype^}(keys, val) // No need to wrap e
    return
}

// MustGet${thetype^}Array will return an array for the specified key(s)
// as a []$rtype.
func (j *JSON) MustGet${thetype^}Array(keys ...any) (ret []$rtype, e error) {
    var tmp $rtype
    var val any

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    if _, ok := val.([]$rtype); ok {
        ret = val.([]$rtype)
        return
    }

    if _, ok := val.([]any); !ok {
        e = errors.Newf("key %v is not of type []$rtype", keys)
        return
    }

    for _, v := range val.([]any) {
        // No need to wrap e
        if tmp, e = as${thetype^}(keys, v); e != nil {
            ret = []$rtype{}
            return
        }
        ret = append(ret, tmp)
    }

    return
}

// MustGet${thetype^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) MustGet${thetype^}Map(keys ...any) (ret map[string]$rtype, e error) {
    var val any

    ret = map[string]$rtype{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    if _, ok := val.(map[string]$rtype); ok {
        ret = val.(map[string]$rtype)
        return
    }

    for k, v := range val.(map[string]any) {
        // No need to wrap e
        if ret[k], e = as${thetype^}(keys, v); e != nil {
            ret = map[string]$rtype{}
            return
        }
    }

    return
}

EOF
            ;;
    esac
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

DESCRIPTION
    Create generated.go.

OPTIONS
    -h, --help        Display this help message
        --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args
unset help
color="true"

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift; args+=("$@"); break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    case "$?" in
        0) ;;
        1) shift ;;
        *) usage $? ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Help info
[[ -z $help ]] || usage 0

# Check for missing dependencies
declare -a deps
deps+=("go")
check_deps

# Check for valid params
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package jq

import (
    "sort"
	"strconv"
	"strings"

    "github.com/mjwhitta/errors"
)

type lessFunc func(i int, j int) bool

$(
    for thetype in \
        "" \
        bool \
        float32 float64 \
        int int8 int16 int32 int64 \
        string \
        uint uint8 uint16 uint32 uint64
    do
        generate_type_funcs $thetype
    done; unset thetype

    for datatype in Array Map; do
        generate_keys_func "$datatype" "" bool string any
        generate_keys_func "$datatype" "Float" float32 float64
        generate_keys_func "$datatype" "Int" int int8 int16 int32 \
            int64
        generate_keys_func "$datatype" "Uint" uint uint8 uint16 \
            uint32 uint64

        generate_as_interface_func "$datatype" "" bool string
        generate_as_interface_func "$datatype" "Float" float32 float64
        generate_as_interface_func "$datatype" "Int" int int8 int16 \
            int32 int64
        generate_as_interface_func "$datatype" "Uint" uint uint8 \
            uint16 uint32 uint64
    done; unset datatype
)
EOF

go fmt "$file" >/dev/null
