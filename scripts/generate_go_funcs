#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_funcs() {
    local type="$1"
    local rtype="${type:-interface{\}}"

    case "$type" in
        ""|"bool")
    cat <<EOF
// Get${type^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) Get${type^}(key ...interface{}) $rtype {
    return j.nestedGetKey(key)${type:+.($rtype)}
}

// Get${type^}Array will return an array for the specified key(s) as a
// []$rtype.
func (j *JSON) Get${type^}Array(key ...interface{}) []$rtype {
    return j.nestedGetKey(key).([]$rtype)
}

// Get${type^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) Get${type^}Map(key ...interface{}) map[string]$rtype {
    return j.nestedGetKey(key).(map[string]$rtype)
}

EOF
            ;;
        "float"*|"int"*|"uint"*)
    cat <<EOF
// Get${type^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) Get${type^}(key ...interface{}) $rtype {
    var val interface{} = j.nestedGetKey(key)

    switch val.(type) {
    case float32:
        return $type(val.(float32))
    case int64:
        return $type(val.(int64))
    case int32:
        return $type(val.(int32))
    case int16:
        return $type(val.(int16))
    case int8:
        return $type(val.(int8))
    case int:
        return $type(val.(int))
    case uint64:
        return $type(val.(uint64))
    case uint32:
        return $type(val.(uint32))
    case uint16:
        return $type(val.(uint16))
    case uint8:
        return $type(val.(uint8))
    case uint:
        return $type(val.(uint))
    default:
        return $type(val.(float64))
    }
}

// Get${type^}Array will return an array for the specified key(s) as a
// []$rtype.
func (j *JSON) Get${type^}Array(key ...interface{}) []$rtype {
    var ok bool
    var val = []$type{}

    if val, ok = j.nestedGetKey(key).([]$type); ok {
        return val
    }

    for _, v := range j.nestedGetKey(key).([]interface{}) {
        val = append(val, $type(v.(float64)))
    }

    return val
}

// Get${type^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) Get${type^}Map(key ...interface{}) map[string]$rtype {
    var ok bool
    var val = map[string]$type{}

    if val, ok = j.nestedGetKey(key).(map[string]$type); ok {
        return val
    }

    for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
        val[k] = $type(v.(float64))
    }

    return val
}

EOF
            ;;
        "string")
    cat <<EOF
// Get${type^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) Get${type^}(key ...interface{}) $type {
    return j.nestedGetKey(key).($type)
}

// Get${type^}Array will return an array for the specified key(s) as a
// []$rtype.
func (j *JSON) Get${type^}Array(key ...interface{}) []$type {
    var ok bool
    var val = []$type{}

    if val, ok = j.nestedGetKey(key).([]$type); ok {
        return val
    }

    for _, v := range j.nestedGetKey(key).([]interface{}) {
        val = append(val, v.(string))
    }

    return val
}

// Get${type^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) Get${type^}Map(key ...interface{}) map[string]$type {
    var ok bool
    var val = map[string]$type{}

    if val, ok = j.nestedGetKey(key).(map[string]$type); ok {
        return val
    }

    for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
        val[k] = v.(string)
    }

    return val
}

EOF
            ;;
    esac
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create generated.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package jq

import "fmt"

func asInt(key interface{}) (int, error) {
    var ok bool

    if _, ok = key.(int); ok {
        return key.(int), nil
    } else if _, ok = key.(float64); ok {
        return int(key.(float64)), nil
    } else if _, ok = key.(uint64); ok {
        return int(key.(uint64)), nil
    }

    return 0, fmt.Errorf("key %v not int type", key)
}

func asString(key interface{}) (string, error) {
    var ok bool
    var val string

    if val, ok = key.(string); ok {
        return val, nil
    }

    return "", fmt.Errorf("key %v not string type", key)
}

func (j *JSON) nestedGetKey(keys []interface{}) interface{} {
    var e error
    var tryInt int
    var tryString string
    var v interface{}
    var val interface{} = j.blob

    for _, key := range keys {
        if tryString, e = asString(key); e == nil {
            v = val.(map[string]interface{})[tryString]
        } else if tryInt, e = asInt(key); e == nil {
            v = val.([]interface{})[tryInt]
        }

        if (e != nil) || (v == nil) {
            panic(fmt.Errorf("key %v not found", keys))
        }

        val = v
    }

    return val
}

$(
    for thetype in \
        "" \
        bool \
        float32 float64 \
        int int16 int32 int64 \
        string \
        uint uint16 uint32 uint64
    do
        generate_funcs $thetype
    done; unset thetype
)
EOF

go fmt "$file"
