#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_keys_func() {
    local datatype="$1" && shift
    local family="$1" && shift

    cat <<EOF
func mustGet${family}${datatype}Keys(
    val interface{},
) (ret []string) {
EOF

    case "$datatype" in
        "Map")
            cat <<EOF
	var less = func(i, j int) bool {
		if strings.ToLower(ret[i]) == strings.ToLower(ret[j]) {
            return ret[i] < ret[j]
        }

		return strings.ToLower(ret[i]) < strings.ToLower(ret[j])
	}
EOF
            ;;
    esac

    cat <<EOF
	switch val.(type) {
EOF

    case "$datatype" in
        "Array")
            for thetype in "$@"; do
                cat <<EOF
	case []$thetype:
		for i := 0; i < len(val.([]$thetype)); i++ {
			ret = append(ret, strconv.Itoa(i))
		}
EOF
            done; unset thetype
            ;;
        "Map")
            for thetype in "$@"; do
                cat <<EOF
	case map[string]$thetype:
		for k := range val.(map[string]$thetype) {
			ret = append(ret, k)
		}
EOF
            done; unset thetype
            ;;
    esac

    cat <<EOF
    }

EOF

    case "$datatype" in
        "Map")
            cat <<EOF
    if !sort.SliceIsSorted(ret, less) {
        sort.SliceStable(ret, less)
    }
EOF
            ;;
    esac

    cat <<EOF
	return
}

EOF
}

generate_type_funcs() {
    local thetype="$1"
    local rtype="${thetype:-interface{\}}"

    case "$thetype" in
        "") ;;
        "bool")
            cat <<EOF
func as${thetype^}(
    keys []interface{},
    v interface{},
) (ret $thetype, e error) {
    switch v.(type) {
    case $thetype:
        ret = v.($thetype)
    default:
        e = fmt.Errorf("Key %v is not a $thetype", keys)
    }
    return
}

EOF
            ;;
        "float"*|"int"*|"uint"*)
            cat <<EOF
func as${thetype^}(
    keys []interface{},
    v interface{},
) (ret $thetype, e error) {
    switch v.(type) {
EOF

    for realtype in \
        float32 float64 \
        int int8 int16 int32 int64 \
        uint uint8 uint16 uint32 uint64
    do
        cat <<EOF
    case $realtype:
        ret = $thetype(v.($realtype))
EOF
    done; unset maptype

    cat <<EOF
    default:
        e = fmt.Errorf("Key %v is not a $thetype", keys)
    }
    return
}

EOF
            ;;
        "string")
            cat <<EOF
func as${thetype^}(
    keys []interface{},
    v interface{},
) (ret $thetype, e error) {
    switch v.(type) {
    case $thetype:
        ret = v.($thetype)
    default:
        e = fmt.Errorf("Key %v is not a $thetype", keys)
    }
    return
}

EOF
            ;;
    esac

    case "$thetype" in
        "")
            cat <<EOF
// Get will return the value for the specified key(s) as a $rtype.
func (j *JSON) Get(keys ...interface{}) (ret $rtype) {
    ret, _ = j.MustGet(keys...)
    return
}

// GetArray will return an array for the specified key(s) as an
// []$rtype.
func (j *JSON) GetArray(keys ...interface{}) (ret []$rtype) {
    ret, _ = j.MustGetArray(keys...)
    return
}

// GetMap will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) GetMap(keys ...interface{}) (ret map[string]$rtype) {
    ret, _ = j.MustGetMap(keys...)
    return
}

// MustGet will return the value for the specified key(s) as a $rtype.
func (j *JSON) MustGet(keys ...interface{}) ($rtype, error) {
    return j.nestedGetKey(keys)
}

// MustGetArray will return an array for the specified key(s) as an
// []$rtype.
func (j *JSON) MustGetArray(
    keys ...interface{},
) (ret []$rtype, e error) {
    var val interface{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return ret, e
    }

    switch val.(type) {
EOF

    for arrtype in \
        bool \
        float32 float64 \
        int int8 int16 int32 int64 \
        string \
        uint uint8 uint16 uint32 uint64
    do
        cat <<EOF
    case []$arrtype:
        for _, v := range val.([]$arrtype) {
            ret = append(ret, v)
        }
EOF
    done; unset maptype

    cat <<EOF
    case []$rtype:
        ret = val.([]$rtype)
    default:
        e = fmt.Errorf("Key %v is not a []$rtype", keys)
    }

    return
}

// MustGetMap will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) MustGetMap(
    keys ...interface{},
) (ret map[string]$rtype, e error) {
    var val interface{}

    ret = map[string]$rtype{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    switch val.(type) {
EOF

    for maptype in \
        bool \
        float32 float64 \
        int int8 int16 int32 int64 \
        string \
        uint uint8 uint16 uint32 uint64
    do
        cat <<EOF
    case map[string]$maptype:
        for k, v := range val.(map[string]$maptype) {
            ret[k] = v
        }
EOF
    done; unset maptype

    cat <<EOF
    case map[string]$rtype:
        ret = val.(map[string]$rtype)
    default:
        e = fmt.Errorf("Key %v is not a map[string]$rtype", keys)
    }

    return
}

EOF
            ;;
        "bool"|"float"*|"int"*|"uint"*|"string")
            cat <<EOF
// Get${thetype^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) Get${thetype^}(keys ...interface{}) (ret $rtype) {
    ret, _ = j.MustGet${thetype^}(keys...)
    return
}

// Get${thetype^}Array will return an array for the specified key(s) as a
// []$rtype.
func (j *JSON) Get${thetype^}Array(keys ...interface{}) (ret []$rtype) {
    ret, _ = j.MustGet${thetype^}Array(keys...)
    return
}

// Get${thetype^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) Get${thetype^}Map(
    keys ...interface{},
) (ret map[string]$rtype) {
    ret, _ = j.MustGet${thetype^}Map(keys...)
    return
}

// MustGet${thetype^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) MustGet${thetype^}(
    keys ...interface{},
) (ret $rtype, e error) {
    var val interface{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    ret, e = as${thetype^}(keys, val)
    return
}

// MustGet${thetype^}Array will return an array for the specified key(s)
// as a []$rtype.
func (j *JSON) MustGet${thetype^}Array(
    keys ...interface{},
) (ret []$rtype, e error) {
    var tmp $rtype
    var val interface{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    if _, ok := val.([]$rtype); ok {
        ret = val.([]$rtype)
        return
    }

    if _, ok := val.([]interface{}); !ok {
        e = fmt.Errorf("Key %v is not a []$rtype", keys)
        return
    }

    for _, v := range val.([]interface{}) {
        if tmp, e = as${thetype^}(keys, v); e != nil {
            ret = []$rtype{}
            return
        }
        ret = append(ret, tmp)
    }

    return
}

// MustGet${thetype^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) MustGet${thetype^}Map(
    keys ...interface{},
) (ret map[string]$rtype, e error) {
    var val interface{}

    ret = map[string]$rtype{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    if _, ok := val.(map[string]$rtype); ok {
        ret = val.(map[string]$rtype)
        return
    }

    for k, v := range val.(map[string]interface{}) {
        if ret[k], e = as${thetype^}(keys, v); e != nil {
            ret = map[string]$rtype{}
            return
        }
    }

    return
}

EOF
            ;;
    esac
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create generated.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package jq

import (
    "fmt"
    "sort"
	"strconv"
	"strings"
)

$(
    for thetype in \
        "" \
        bool \
        float32 float64 \
        int int8 int16 int32 int64 \
        string \
        uint uint8 uint16 uint32 uint64
    do
        generate_type_funcs $thetype
    done; unset thetype

    for datatype in Array Map; do
        generate_keys_func "$datatype" "" bool string interface{}
        generate_keys_func "$datatype" "Float" float32 float64
        generate_keys_func "$datatype" "Int" int int8 int16 int32 \
            int64
        generate_keys_func "$datatype" "String" string
        generate_keys_func "$datatype" "Uint" uint uint8 uint16 \
            uint32 uint64
    done; unset datatype
)

// MustGetKeys will return a list of valid keys if the specified key
// returns an array or map.
func (j *JSON) MustGetKeys(
	keys ...interface{},
) (ret []string, e error) {
	var val interface{}

	if val, e = j.nestedGetKey(keys); e != nil {
		return
	}

	switch val.(type) {
	case []bool, []string, []interface{}:
        ret = mustGetArrayKeys(val)
    case []float32, []float64:
        ret = mustGetFloatArrayKeys(val)
	case []int, []int8, []int16, []int32, []int64:
        ret = mustGetIntArrayKeys(val)
	case []uint, []uint8, []uint16, []uint32, []uint64:
        ret = mustGetUintArrayKeys(val)
	case map[string]bool, map[string]string, map[string]interface{}:
        ret = mustGetMapKeys(val)
    case map[string]float32, map[string]float64:
        ret = mustGetFloatMapKeys(val)
	case map[string]int, map[string]int8, map[string]int16,
		map[string]int32, map[string]int64:
        ret = mustGetIntMapKeys(val)
	case map[string]uint, map[string]uint8, map[string]uint16,
		map[string]uint32, map[string]uint64:
        ret = mustGetUintMapKeys(val)
	default:
		e = fmt.Errorf("Key %v has no valid sub-keys", keys)
	}
	return
}

// Set will set the specified value for the specified key in the JSON
// blob.
func (j *JSON) Set(value interface{}, keys ...interface{}) error {
	var e error
	var parentArr []interface{}
	var parentMap map[string]interface{}
	var tryInt int
	var tryString string

	if len(keys) == 0 {
		switch value.(type) {
$(
    for maptype in \
        bool \
        float32 float64 \
        int int8 int16 int32 int64 \
        string \
        uint uint8 uint16 uint32 uint64
    do
        cat <<EOC
		case map[string]$maptype:
            j.blob = map[string]interface{}{}
            for k, v := range value.(map[string]$maptype) {
                j.blob[k] = v
            }
			return nil
EOC
    done; unset maptype
)
		case map[string]interface{}:
			j.blob = value.(map[string]interface{})
			return nil
		default:
			return fmt.Errorf("Value is not a map[string]interface{}")
		}
	} else if len(keys) == 1 {
		if tryString, e = asString(keys, keys[0]); e != nil {
			return e
		}

		j.blob[tryString] = value
		return nil
	}

	if _, e = j.nestedGetKey(keys[0 : len(keys)-1]); e != nil {
		return e
	}

	parentMap, e = j.MustGetMap(keys[0 : len(keys)-1]...)
	if e == nil {
		tryString, e = asString(keys, keys[len(keys)-1])
		if e != nil {
			return e
		}

		parentMap[tryString] = value
		return j.Set(parentMap, keys[0:len(keys)-1]...)
	}

	parentArr, e = j.MustGetArray(keys[0 : len(keys)-1]...)
	if e == nil {
		if tryInt, e = asInt(keys, keys[len(keys)-1]); e != nil {
			return e
		}

		parentArr[tryInt] = value
		return j.Set(parentArr, keys[0:len(keys)-1]...)
	}

	return fmt.Errorf("Key %v not found", keys)
}
EOF

go fmt "$file"
