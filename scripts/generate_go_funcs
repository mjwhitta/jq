#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_funcs() {
    local type="$1"
    local rtype="${type:-interface{\}}"

    case "$type" in
        "") ;;
        "bool")
            cat <<EOF
func as${type^}(v interface{}) ($type, error) {
    switch v.(type) {
    case $type:
        return v.($type), nil
    default:
        return false, fmt.Errorf("Not a $type")
    }
}

EOF
            ;;
        "float"*|"int"*|"uint"*)
            cat <<EOF
func as${type^}(v interface{}) ($type, error) {
    switch v.(type) {
    case float64:
        return $type(v.(float64)), nil
    case float32:
        return $type(v.(float32)), nil
    case int64:
        return $type(v.(int64)), nil
    case int32:
        return $type(v.(int32)), nil
    case int16:
        return $type(v.(int16)), nil
    case int8:
        return $type(v.(int8)), nil
    case int:
        return $type(v.(int)), nil
    case uint64:
        return $type(v.(uint64)), nil
    case uint32:
        return $type(v.(uint32)), nil
    case uint16:
        return $type(v.(uint16)), nil
    case uint8:
        return $type(v.(uint8)), nil
    case uint:
        return $type(v.(uint)), nil
    default:
        return 0, fmt.Errorf("Not a ${type}")
    }
}

EOF
            ;;
        "string")
            cat <<EOF
func as${type^}(v interface{}) ($type, error) {
    switch v.(type) {
    case $type:
        return v.($type), nil
    default:
        return "", fmt.Errorf("Not a ${type}")
    }
}

EOF
            ;;
    esac

    case "$type" in
        "")
            cat <<EOF
// Get will return the value for the specified key(s) as a $rtype.
func (j *JSON) Get(key ...interface{}) ($rtype, error) {
    var e error
    var val interface{}

    if val, e = j.nestedGetKey(key); e != nil {
        return nil, e
    }

    return val, nil
}

// GetArray will return an array for the specified key(s) as an
// []$rtype.
func (j *JSON) GetArray(key ...interface{}) ([]$rtype, error) {
    var e error
    var ok bool
    var ret []$rtype
    var val interface{}

    if val, e = j.nestedGetKey(key); e != nil {
        return ret, e
    }

    if ret, ok = val.([]$rtype); !ok {
        return ret, fmt.Errorf("Not a []$rtype")
    }

    return ret, nil
}

// GetMap will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) GetMap(key ...interface{}) (map[string]$rtype, error) {
    var e error
    var ok bool
    var ret = map[string]$rtype{}
    var val interface{}

    if val, e = j.nestedGetKey(key); e != nil {
        return ret, e
    }

    if ret, ok = val.(map[string]$rtype); !ok {
        return ret, fmt.Errorf("Not a map[string]$rtype")
    }

    return ret, nil
}

EOF
            ;;
        "bool"|"float"*|"int"*|"uint"*|"string")
            cat <<EOF
// Get${type^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) Get${type^}(key ...interface{}) ($rtype, error) {
    var e error
    var ret $rtype
    var val interface{}

    if val, e = j.nestedGetKey(key); e != nil {
        return ret, e
    }

    return as${type^}(val)
}

// Get${type^}Array will return an array for the specified key(s) as a
// []$rtype.
func (j *JSON) Get${type^}Array(
    key ...interface{},
) ([]$rtype, error) {
    var e error
    var ok bool
    var ret = []$rtype{}
    var tmp $rtype
    var val interface{}

    if val, e = j.nestedGetKey(key); e != nil {
        return ret, e
    }

    if _, ok = val.([]$rtype); ok {
        return val.([]$rtype), nil
    }

    for _, v := range val.([]interface{}) {
        if tmp, e = as${type^}(v); e != nil {
            return []$rtype{}, e
        }
        ret = append(ret, tmp)
    }

    return ret, nil
}

// Get${type^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) Get${type^}Map(
    key ...interface{},
) (map[string]$rtype, error) {
    var e error
    var ok bool
    var ret = map[string]$rtype{}
    var val interface{}

    if val, e = j.nestedGetKey(key); e != nil {
        return ret, e
    }

    if _, ok = val.(map[string]$rtype); ok {
        return val.(map[string]$rtype), nil
    }

    for k, v := range val.(map[string]interface{}) {
        if ret[k], e = as${type^}(v); e != nil {
            return map[string]$rtype{}, e
        }
    }

    return ret, nil
}

EOF
            ;;
    esac
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create generated.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package jq

import "fmt"

$(
    for thetype in \
        "" \
        bool \
        float32 float64 \
        int int16 int32 int64 \
        string \
        uint uint16 uint32 uint64
    do
        generate_funcs $thetype
    done; unset thetype
)
EOF

go fmt "$file"
