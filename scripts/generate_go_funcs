#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_funcs() {
    local type="$1"
    local rtype="${type:-interface{\}}"

    case "$type" in
        "") ;;
        "bool")
            cat <<EOF
func as${type^}(
    keys []interface{},
    v interface{},
) (ret $type, e error) {
    switch v.(type) {
    case $type:
        ret = v.($type)
    default:
        e = fmt.Errorf("Key %v is not a $type", keys)
    }
    return
}

EOF
            ;;
        "float"*|"int"*|"uint"*)
            cat <<EOF
func as${type^}(
    keys []interface{},
    v interface{},
) (ret $type, e error) {
    switch v.(type) {
EOF

    for realtype in \
        float32 float64 \
        int int16 int32 int64 \
        uint uint16 uint32 uint64
    do
        cat <<EOF
    case $realtype:
        ret = $type(v.($realtype))
EOF
    done; unset maptype

    cat <<EOF
    default:
        e = fmt.Errorf("Key %v is not a $type", keys)
    }
    return
}

EOF
            ;;
        "string")
            cat <<EOF
func as${type^}(
    keys []interface{},
    v interface{},
) (ret $type, e error) {
    switch v.(type) {
    case $type:
        ret = v.($type)
    default:
        e = fmt.Errorf("Key %v is not a $type", keys)
    }
    return
}

EOF
            ;;
    esac

    case "$type" in
        "")
            cat <<EOF
// Get will return the value for the specified key(s) as a $rtype.
func (j *JSON) Get(keys ...interface{}) (ret $rtype) {
    ret, _ = j.MustGet(keys...)
    return
}

// GetArray will return an array for the specified key(s) as an
// []$rtype.
func (j *JSON) GetArray(keys ...interface{}) (ret []$rtype) {
    ret, _ = j.MustGetArray(keys...)
    return
}

// GetMap will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) GetMap(keys ...interface{}) (ret map[string]$rtype) {
    ret, _ = j.MustGetMap(keys...)
    return
}

// MustGet will return the value for the specified key(s) as a $rtype.
func (j *JSON) MustGet(keys ...interface{}) ($rtype, error) {
    return j.nestedGetKey(keys)
}

// MustGetArray will return an array for the specified key(s) as an
// []$rtype.
func (j *JSON) MustGetArray(
    keys ...interface{},
) (ret []$rtype, e error) {
    var val interface{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return ret, e
    }

    switch val.(type) {
EOF

    for arrtype in \
        bool \
        float32 float64 \
        int int16 int32 int64 \
        string \
        uint uint16 uint32 uint64
    do
        cat <<EOF
    case []$arrtype:
        for _, v := range val.([]$arrtype) {
            ret = append(ret, v)
        }
EOF
    done; unset maptype

    cat <<EOF
    case []$rtype:
        ret = val.([]$rtype)
    default:
        e = fmt.Errorf("Key %v is not a []$rtype", keys)
    }

    return
}

// MustGetMap will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) MustGetMap(
    keys ...interface{},
) (ret map[string]$rtype, e error) {
    var val interface{}

    ret = map[string]$rtype{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    switch val.(type) {
EOF

    for maptype in \
        bool \
        float32 float64 \
        int int16 int32 int64 \
        string \
        uint uint16 uint32 uint64
    do
        cat <<EOF
    case map[string]$maptype:
        for k, v := range val.(map[string]$maptype) {
            ret[k] = v
        }
EOF
    done; unset maptype

    cat <<EOF
    case map[string]$rtype:
        ret = val.(map[string]$rtype)
    default:
        e = fmt.Errorf("Key %v is not a map[string]$rtype", keys)
    }

    return
}

EOF
            ;;
        "bool"|"float"*|"int"*|"uint"*|"string")
            cat <<EOF
// Get${type^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) Get${type^}(keys ...interface{}) (ret $rtype) {
    ret, _ = j.MustGet${type^}(keys...)
    return
}

// Get${type^}Array will return an array for the specified key(s) as a
// []$rtype.
func (j *JSON) Get${type^}Array(keys ...interface{}) (ret []$rtype) {
    ret, _ = j.MustGet${type^}Array(keys...)
    return
}

// Get${type^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) Get${type^}Map(
    keys ...interface{},
) (ret map[string]$rtype) {
    ret, _ = j.MustGet${type^}Map(keys...)
    return
}

// MustGet${type^} will return the value for the specified key(s) as a
// $rtype.
func (j *JSON) MustGet${type^}(
    keys ...interface{},
) (ret $rtype, e error) {
    var val interface{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    ret, e = as${type^}(keys, val)
    return
}

// MustGet${type^}Array will return an array for the specified key(s)
// as a []$rtype.
func (j *JSON) MustGet${type^}Array(
    keys ...interface{},
) (ret []$rtype, e error) {
    var tmp $rtype
    var val interface{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    if _, ok := val.([]$rtype); ok {
        ret = val.([]$rtype)
        return
    }

    if _, ok := val.([]interface{}); !ok {
        e = fmt.Errorf("Key %v is not a []$rtype", keys)
        return
    }

    for _, v := range val.([]interface{}) {
        if tmp, e = as${type^}(keys, v); e != nil {
            ret = []$rtype{}
            return
        }
        ret = append(ret, tmp)
    }

    return
}

// MustGet${type^}Map will return a map for the specified key(s) as a
// map[string]$rtype.
func (j *JSON) MustGet${type^}Map(
    keys ...interface{},
) (ret map[string]$rtype, e error) {
    var val interface{}

    ret = map[string]$rtype{}

    if val, e = j.nestedGetKey(keys); e != nil {
        return
    }

    if _, ok := val.(map[string]$rtype); ok {
        ret = val.(map[string]$rtype)
        return
    }

    for k, v := range val.(map[string]interface{}) {
        if ret[k], e = as${type^}(keys, v); e != nil {
            ret = map[string]$rtype{}
            return
        }
    }

    return
}

EOF
            ;;
    esac
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create generated.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package jq

import "fmt"

$(
    for thetype in \
        "" \
        bool \
        float32 float64 \
        int int16 int32 int64 \
        string \
        uint uint16 uint32 uint64
    do
        generate_funcs $thetype
    done; unset thetype
)
EOF

go fmt "$file"
