// Code generated by scripts/generate_go_funcs; DO NOT EDIT.
package jq

import "fmt"

func asInt(key interface{}) (int, error) {
	var ok bool

	if _, ok = key.(int); ok {
		return key.(int), nil
	} else if _, ok = key.(float64); ok {
		return int(key.(float64)), nil
	} else if _, ok = key.(uint64); ok {
		return int(key.(uint64)), nil
	}

	return 0, fmt.Errorf("key %v not int type", key)
}

func asString(key interface{}) (string, error) {
	var ok bool
	var val string

	if val, ok = key.(string); ok {
		return val, nil
	}

	return "", fmt.Errorf("key %v not string type", key)
}

func (j *JSON) nestedGetKey(keys []interface{}) interface{} {
	var e error
	var tryInt int
	var tryString string
	var v interface{}
	var val interface{} = j.blob

	for _, key := range keys {
		if tryString, e = asString(key); e == nil {
			v = val.(map[string]interface{})[tryString]
		} else if tryInt, e = asInt(key); e == nil {
			v = val.([]interface{})[tryInt]
		}

		if (e != nil) || (v == nil) {
			panic(fmt.Errorf("key %v not found", keys))
		}

		val = v
	}

	return val
}

// Get will return the value for the specified key(s) as a
// interface{}.
func (j *JSON) Get(key ...interface{}) interface{} {
	return j.nestedGetKey(key)
}

// GetArray will return an array for the specified key(s) as a
// []interface{}.
func (j *JSON) GetArray(key ...interface{}) []interface{} {
	return j.nestedGetKey(key).([]interface{})
}

// GetMap will return a map for the specified key(s) as a
// map[string]interface{}.
func (j *JSON) GetMap(key ...interface{}) map[string]interface{} {
	return j.nestedGetKey(key).(map[string]interface{})
}

// GetBool will return the value for the specified key(s) as a
// bool.
func (j *JSON) GetBool(key ...interface{}) bool {
	return j.nestedGetKey(key).(bool)
}

// GetBoolArray will return an array for the specified key(s) as a
// []bool.
func (j *JSON) GetBoolArray(key ...interface{}) []bool {
	return j.nestedGetKey(key).([]bool)
}

// GetBoolMap will return a map for the specified key(s) as a
// map[string]bool.
func (j *JSON) GetBoolMap(key ...interface{}) map[string]bool {
	return j.nestedGetKey(key).(map[string]bool)
}

// GetFloat32 will return the value for the specified key(s) as a
// float32.
func (j *JSON) GetFloat32(key ...interface{}) float32 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return float32(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return float32(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return float32(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return float32(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return float32(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return float32(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return float32(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return float32(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return float32(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return float32(val.(uint))
	}

	return float32(j.nestedGetKey(key).(float64))
}

// GetFloat32Array will return an array for the specified key(s) as a
// []float32.
func (j *JSON) GetFloat32Array(key ...interface{}) []float32 {
	var ok bool
	var val = []float32{}

	if val, ok = j.nestedGetKey(key).([]float32); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, float32(v.(float64)))
	}

	return val
}

// GetFloat32Map will return a map for the specified key(s) as a
// map[string]float32.
func (j *JSON) GetFloat32Map(key ...interface{}) map[string]float32 {
	var ok bool
	var val = map[string]float32{}

	if val, ok = j.nestedGetKey(key).(map[string]float32); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = float32(v.(float64))
	}

	return val
}

// GetFloat64 will return the value for the specified key(s) as a
// float64.
func (j *JSON) GetFloat64(key ...interface{}) float64 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return float64(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return float64(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return float64(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return float64(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return float64(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return float64(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return float64(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return float64(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return float64(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return float64(val.(uint))
	}

	return float64(j.nestedGetKey(key).(float64))
}

// GetFloat64Array will return an array for the specified key(s) as a
// []float64.
func (j *JSON) GetFloat64Array(key ...interface{}) []float64 {
	var ok bool
	var val = []float64{}

	if val, ok = j.nestedGetKey(key).([]float64); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, float64(v.(float64)))
	}

	return val
}

// GetFloat64Map will return a map for the specified key(s) as a
// map[string]float64.
func (j *JSON) GetFloat64Map(key ...interface{}) map[string]float64 {
	var ok bool
	var val = map[string]float64{}

	if val, ok = j.nestedGetKey(key).(map[string]float64); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = float64(v.(float64))
	}

	return val
}

// GetInt will return the value for the specified key(s) as a
// int.
func (j *JSON) GetInt(key ...interface{}) int {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return int(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return int(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return int(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return int(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return int(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return int(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return int(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return int(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return int(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return int(val.(uint))
	}

	return int(j.nestedGetKey(key).(float64))
}

// GetIntArray will return an array for the specified key(s) as a
// []int.
func (j *JSON) GetIntArray(key ...interface{}) []int {
	var ok bool
	var val = []int{}

	if val, ok = j.nestedGetKey(key).([]int); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, int(v.(float64)))
	}

	return val
}

// GetIntMap will return a map for the specified key(s) as a
// map[string]int.
func (j *JSON) GetIntMap(key ...interface{}) map[string]int {
	var ok bool
	var val = map[string]int{}

	if val, ok = j.nestedGetKey(key).(map[string]int); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = int(v.(float64))
	}

	return val
}

// GetInt16 will return the value for the specified key(s) as a
// int16.
func (j *JSON) GetInt16(key ...interface{}) int16 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return int16(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return int16(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return int16(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return int16(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return int16(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return int16(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return int16(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return int16(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return int16(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return int16(val.(uint))
	}

	return int16(j.nestedGetKey(key).(float64))
}

// GetInt16Array will return an array for the specified key(s) as a
// []int16.
func (j *JSON) GetInt16Array(key ...interface{}) []int16 {
	var ok bool
	var val = []int16{}

	if val, ok = j.nestedGetKey(key).([]int16); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, int16(v.(float64)))
	}

	return val
}

// GetInt16Map will return a map for the specified key(s) as a
// map[string]int16.
func (j *JSON) GetInt16Map(key ...interface{}) map[string]int16 {
	var ok bool
	var val = map[string]int16{}

	if val, ok = j.nestedGetKey(key).(map[string]int16); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = int16(v.(float64))
	}

	return val
}

// GetInt32 will return the value for the specified key(s) as a
// int32.
func (j *JSON) GetInt32(key ...interface{}) int32 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return int32(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return int32(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return int32(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return int32(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return int32(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return int32(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return int32(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return int32(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return int32(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return int32(val.(uint))
	}

	return int32(j.nestedGetKey(key).(float64))
}

// GetInt32Array will return an array for the specified key(s) as a
// []int32.
func (j *JSON) GetInt32Array(key ...interface{}) []int32 {
	var ok bool
	var val = []int32{}

	if val, ok = j.nestedGetKey(key).([]int32); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, int32(v.(float64)))
	}

	return val
}

// GetInt32Map will return a map for the specified key(s) as a
// map[string]int32.
func (j *JSON) GetInt32Map(key ...interface{}) map[string]int32 {
	var ok bool
	var val = map[string]int32{}

	if val, ok = j.nestedGetKey(key).(map[string]int32); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = int32(v.(float64))
	}

	return val
}

// GetInt64 will return the value for the specified key(s) as a
// int64.
func (j *JSON) GetInt64(key ...interface{}) int64 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return int64(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return int64(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return int64(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return int64(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return int64(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return int64(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return int64(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return int64(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return int64(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return int64(val.(uint))
	}

	return int64(j.nestedGetKey(key).(float64))
}

// GetInt64Array will return an array for the specified key(s) as a
// []int64.
func (j *JSON) GetInt64Array(key ...interface{}) []int64 {
	var ok bool
	var val = []int64{}

	if val, ok = j.nestedGetKey(key).([]int64); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, int64(v.(float64)))
	}

	return val
}

// GetInt64Map will return a map for the specified key(s) as a
// map[string]int64.
func (j *JSON) GetInt64Map(key ...interface{}) map[string]int64 {
	var ok bool
	var val = map[string]int64{}

	if val, ok = j.nestedGetKey(key).(map[string]int64); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = int64(v.(float64))
	}

	return val
}

// GetString will return the value for the specified key(s) as a
// string.
func (j *JSON) GetString(key ...interface{}) string {
	return j.nestedGetKey(key).(string)
}

// GetStringArray will return an array for the specified key(s) as a
// []string.
func (j *JSON) GetStringArray(key ...interface{}) []string {
	var ok bool
	var val = []string{}

	if val, ok = j.nestedGetKey(key).([]string); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, v.(string))
	}

	return val
}

// GetStringMap will return a map for the specified key(s) as a
// map[string]string.
func (j *JSON) GetStringMap(key ...interface{}) map[string]string {
	var ok bool
	var val = map[string]string{}

	if val, ok = j.nestedGetKey(key).(map[string]string); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = v.(string)
	}

	return val
}

// GetUint will return the value for the specified key(s) as a
// uint.
func (j *JSON) GetUint(key ...interface{}) uint {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return uint(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return uint(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return uint(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return uint(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return uint(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return uint(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return uint(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return uint(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return uint(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return uint(val.(uint))
	}

	return uint(j.nestedGetKey(key).(float64))
}

// GetUintArray will return an array for the specified key(s) as a
// []uint.
func (j *JSON) GetUintArray(key ...interface{}) []uint {
	var ok bool
	var val = []uint{}

	if val, ok = j.nestedGetKey(key).([]uint); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, uint(v.(float64)))
	}

	return val
}

// GetUintMap will return a map for the specified key(s) as a
// map[string]uint.
func (j *JSON) GetUintMap(key ...interface{}) map[string]uint {
	var ok bool
	var val = map[string]uint{}

	if val, ok = j.nestedGetKey(key).(map[string]uint); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = uint(v.(float64))
	}

	return val
}

// GetUint16 will return the value for the specified key(s) as a
// uint16.
func (j *JSON) GetUint16(key ...interface{}) uint16 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return uint16(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return uint16(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return uint16(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return uint16(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return uint16(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return uint16(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return uint16(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return uint16(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return uint16(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return uint16(val.(uint))
	}

	return uint16(j.nestedGetKey(key).(float64))
}

// GetUint16Array will return an array for the specified key(s) as a
// []uint16.
func (j *JSON) GetUint16Array(key ...interface{}) []uint16 {
	var ok bool
	var val = []uint16{}

	if val, ok = j.nestedGetKey(key).([]uint16); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, uint16(v.(float64)))
	}

	return val
}

// GetUint16Map will return a map for the specified key(s) as a
// map[string]uint16.
func (j *JSON) GetUint16Map(key ...interface{}) map[string]uint16 {
	var ok bool
	var val = map[string]uint16{}

	if val, ok = j.nestedGetKey(key).(map[string]uint16); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = uint16(v.(float64))
	}

	return val
}

// GetUint32 will return the value for the specified key(s) as a
// uint32.
func (j *JSON) GetUint32(key ...interface{}) uint32 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return uint32(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return uint32(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return uint32(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return uint32(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return uint32(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return uint32(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return uint32(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return uint32(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return uint32(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return uint32(val.(uint))
	}

	return uint32(j.nestedGetKey(key).(float64))
}

// GetUint32Array will return an array for the specified key(s) as a
// []uint32.
func (j *JSON) GetUint32Array(key ...interface{}) []uint32 {
	var ok bool
	var val = []uint32{}

	if val, ok = j.nestedGetKey(key).([]uint32); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, uint32(v.(float64)))
	}

	return val
}

// GetUint32Map will return a map for the specified key(s) as a
// map[string]uint32.
func (j *JSON) GetUint32Map(key ...interface{}) map[string]uint32 {
	var ok bool
	var val = map[string]uint32{}

	if val, ok = j.nestedGetKey(key).(map[string]uint32); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = uint32(v.(float64))
	}

	return val
}

// GetUint64 will return the value for the specified key(s) as a
// uint64.
func (j *JSON) GetUint64(key ...interface{}) uint64 {
	var ok bool
	var val interface{}

	if val, ok = j.nestedGetKey(key).(float64); ok {
		return uint64(val.(float64))
	} else if val, ok = j.nestedGetKey(key).(float32); ok {
		return uint64(val.(float32))
	} else if val, ok = j.nestedGetKey(key).(int64); ok {
		return uint64(val.(int64))
	} else if val, ok = j.nestedGetKey(key).(int32); ok {
		return uint64(val.(int32))
	} else if val, ok = j.nestedGetKey(key).(int16); ok {
		return uint64(val.(int16))
	} else if val, ok = j.nestedGetKey(key).(int); ok {
		return uint64(val.(int))
	} else if val, ok = j.nestedGetKey(key).(uint64); ok {
		return uint64(val.(uint64))
	} else if val, ok = j.nestedGetKey(key).(uint32); ok {
		return uint64(val.(uint32))
	} else if val, ok = j.nestedGetKey(key).(uint16); ok {
		return uint64(val.(uint16))
	} else if val, ok = j.nestedGetKey(key).(uint); ok {
		return uint64(val.(uint))
	}

	return uint64(j.nestedGetKey(key).(float64))
}

// GetUint64Array will return an array for the specified key(s) as a
// []uint64.
func (j *JSON) GetUint64Array(key ...interface{}) []uint64 {
	var ok bool
	var val = []uint64{}

	if val, ok = j.nestedGetKey(key).([]uint64); ok {
		return val
	}

	for _, v := range j.nestedGetKey(key).([]interface{}) {
		val = append(val, uint64(v.(float64)))
	}

	return val
}

// GetUint64Map will return a map for the specified key(s) as a
// map[string]uint64.
func (j *JSON) GetUint64Map(key ...interface{}) map[string]uint64 {
	var ok bool
	var val = map[string]uint64{}

	if val, ok = j.nestedGetKey(key).(map[string]uint64); ok {
		return val
	}

	for k, v := range j.nestedGetKey(key).(map[string]interface{}) {
		val[k] = uint64(v.(float64))
	}

	return val
}
